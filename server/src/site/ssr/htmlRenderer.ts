import { buildHtmlTemplate } from './templateBuilder';
import { ViteDevServer } from 'vite';
// @ts-ignore (this file is generated by vite build)
import { render } from '../../_ssr-dist/main-server';

export type HtmlRenderer = (
    url: string,
    context?: AppContext
) => Promise<string>;

export type AppContext = {
    [key: string]: string | number | boolean | null | AppContext;
};

const processTemplate = async (
    templateHtml: string,
    appHtml: string,
    appContext: AppContext = {}
) => {
    return templateHtml
        .replace('<!--ssr-app-html-->', appHtml)
        .replace('"ssr-app-context"', JSON.stringify(appContext));
};

export const prodRender: HtmlRenderer = async (url, context) => {
    try {
        const template = await buildHtmlTemplate();
        const appHtml = render({});
        return processTemplate(template, appHtml, context);
    } catch (e) {
        console.error(`Rendering failed ${e}`);
        return '';
    }
};

export const devRender =
    (vite: ViteDevServer): HtmlRenderer =>
    async (url, context) => {
        try {
            const template = await buildHtmlTemplate();
            // SSR in Vite dev mode does not play nice with preact/compat and
            // external react modules. We'll make do with CSR + a somewhat subpar
            // HMR for now (see also main-client.tsx :D)
            // Run in production mode to use SSR locally
            // (or uncomment below and try to figure it out!)
            // const { render } = await vite.ssrLoadModule('/src/main-server.tsx');
            const appHtml = ''; // render();
            const html = await vite.transformIndexHtml(url, template);
            return processTemplate(html, appHtml, context);
        } catch (e) {
            vite.ssrFixStacktrace(e as Error);
            console.error(`Dev render error: ${e}`);
            throw e;
        }
    };
